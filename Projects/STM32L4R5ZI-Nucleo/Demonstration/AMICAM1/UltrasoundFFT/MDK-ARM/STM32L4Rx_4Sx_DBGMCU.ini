// File: STM32L4Rx_4Sx_DBGMCU.ini
// Version: 1.0.0
// Note: refer to STM324Rxxx and STM32L4Sxxx Reference manual (RM0432)
//       refer to STM32L4R5xx STM32L4R7xx STM32L4R9xx datasheet
//       refer to STM32L4S5xx STM32L4S7xx STM32L4S9xx datasheet


/* variable to hold register values */
define unsigned long DbgMCU_CR;
define unsigned long DbgMCU_APB1_Fz1;
define unsigned long DbgMCU_APB1_Fz2;
define unsigned long DbgMCU_APB2_Fz;

define unsigned char TraceClk_Pin;     // 0 = PE2
define unsigned char TraceD0_Pin;      // 0 = PE3, 1 = PC1,  2 = PC9
define unsigned char TraceD1_Pin;      // 0 = PE4, 1 = PC10
define unsigned char TraceD2_Pin;      // 0 = PE5, 1 = PD2
define unsigned char TraceD3_Pin;      // 0 = PE6, 1 = PC12

// <<< Use Configuration Wizard in Context Menu >>>

// <h> Debug MCU configuration register (DBGMCU_CR)
//                                   <i> Reserved bits must be kept at reset value
//   <o.6..7> TRACE_MODE             <i> Trace Mode
//      <0=> Asynchronous
//      <1=> Synchronous: TRACEDATA Size 1
//      <2=> Synchronous: TRACEDATA Size 2
//      <3=> Synchronous: TRACEDATA Size 4
//   <o.5>  TRACE_IOEN               <i> Trace I/O Enable
//   <o.2>  DBG_STANDBY              <i> Debug Standby mode
//   <o.1>  DBG_STOP                 <i> Debug Stop mode
//   <o.0>  DBG_SLEEP                <i> Debug Sleep mode
// </h>
DbgMCU_CR = 0x00000007;

// <h> Debug MCU APB1 freeze register1 (DBGMCU_APB1FZR1)
//                                   <i> Reserved bits must be kept at reset value
//   <o.31> DBG_LPTIM1_STOP          <i> LPTIM1 counter stopped when core is halted
//   <o.25> DBG_CAN1_STOP            <i> bxCAN1 stopped when core is halted
//   <o.23> DBG_I2C3_STOP            <i> I2C3 SMBUS timeout counter stopped when core is halted
//   <o.22> DBG_I2C2_STOP            <i> I2C2 SMBUS timeout counter stopped when core is halted
//   <o.21> DBG_I2C1_STOP            <i> I2C1 SMBUS timeout counter stopped when core is halted
//   <o.12> DBG_IWDG_STOP            <i> Independent watchdog counter stopped when core is halted
//   <o.11> DBG_WWDG_STOP            <i> Window watchdog counter stopped when core is halted
//   <o.10> DBG_RTC_STOP             <i> RTC counter stopped when core is halted
//   <o.5>  DBG_TIM7_STOP            <i> TIM7 counter stopped when core is halted
//   <o.4>  DBG_TIM6_STOP            <i> TIM6 counter stopped when core is halted
//   <o.3>  DBG_TIM5_STOP            <i> TIM5 counter stopped when core is halted
//   <o.2>  DBG_TIM4_STOP            <i> TIM4 counter stopped when core is halted
//   <o.1>  DBG_TIM3_STOP            <i> TIM3 counter stopped when core is halted
//   <o.0>  DBG_TIM2_STOP            <i> TIM2 counter stopped when core is halted
// </h>
DbgMCU_APB1_Fz1 = 0x00000000;

// <h> Debug MCU APB1 freeze register 2 (DBGMCU_APB1FZR2)
//                                   <i> Reserved bits must be kept at reset value
//   <o.5>  DBG_LPTIM2_STOP          <i> LPTIM2 counter stopped when core is halted
//   <o.1>  DBG_I2C4_STOP            <i> I2C4 SMBUS timeout counter stopped when core is halted
// </h>
DbgMCU_APB1_Fz2 = 0x00000000;

// <h> Debug MCU APB2 freeze register (DBGMCU_APB2FZR)
//                                   <i> Reserved bits must be kept at reset value
//   <o.18> DBG_TIM17_STOP           <i> TIM17 counter stopped when core is halted
//   <o.17> DBG_TIM16_STOP           <i> TIM16 counter stopped when core is halted
//   <o.16> DBG_TIM15_STOP           <i> TIM15 counter stopped when core is halted
//   <o.13> DBG_TIM8_STOP            <i> TIM8 counter stopped when core is halted
//   <o.11> DBG_TIM1_STOP            <i> TIM1 counter stopped when core is halted
// </h>
DbgMCU_APB2_Fz = 0x00000000;

// <h> TPIU Pin Routing (TRACECLK fixed on Pin PE2)
//   <i> TRACECLK: Pin PE2
//   <o1> TRACED0
//     <i> ETM Trace Data 0
//       <0=> Pin PE3
//       <1=> Pin PC1
//       <2=> Pin PC9
//   <o2> TRACED1
//     <i> ETM Trace Data 1
//       <0=> Pin PE4
//       <1=> Pin PC10
//   <o3> TRACED2
//     <i> ETM Trace Data 2
//       <0=> Pin PE5
//       <1=> Pin PD2
//   <o4> TRACED3
//     <i> ETM Trace Data 3
//       <0=> Pin PE6
//       <1=> Pin PC12
// </h>
TraceClk_Pin = 0;
TraceD0_Pin  = 0;
TraceD1_Pin  = 0;
TraceD2_Pin  = 0;
TraceD3_Pin  = 0;

// <<< end of configuration section >>>

/*----------------------------------------------------------------------------
  Setup_TracePins()  configure the used trace pins
 *----------------------------------------------------------------------------*/
FUNC void Setup_TracePins (unsigned char trace_mode) {

  if (trace_mode == 0) {           /* asynchronous mode */
          /* configure SWO (PB3) */
          _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000002) );  // RCC_AHB2ENR: IO port B clock enable
          _WDWORD(0x48000400, ((_RDWORD(0x48000400) & ~0x000000C0) | 0x00000080) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48000408, ((_RDWORD(0x48000408)              ) | 0x000000C0) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800040C, ((_RDWORD(0x4800040C) & ~0x000000C0)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48000420, ((_RDWORD(0x48000420) & ~0x0000F000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
  }
  else {                           /* synchronous mode */
          /* configure TRACECLK (PE2) */
          _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000010) );  // RCC_AHB2ENR: IO port E clock enable
          _WDWORD(0x48001000, ((_RDWORD(0x48001000) & ~0x00000030) | 0x00000020) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48001008, ((_RDWORD(0x48001008)              ) | 0x00000030) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800100C, ((_RDWORD(0x4800100C) & ~0x00000030)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48001020, ((_RDWORD(0x48001020) & ~0x00000F00)             ) );  // GPIOx_AFRL:    Alternate Function to AF0

    switch (trace_mode) {
      case 3:                      /* TRACEDATA[3..2] */
        /* configure TRACED3 */
        if (TraceD3_Pin == 0) {   /* TRACED3 = PE6 */
          /* configure TRACED3 (PE6) */
       // _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000010) );  // RCC_AHB2ENR: IO port E clock enable
          _WDWORD(0x48001000, ((_RDWORD(0x48001000) & ~0x00003000) | 0x00002000) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48001008, ((_RDWORD(0x48001008)              ) | 0x00003000) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800100C, ((_RDWORD(0x4800100C) & ~0x00003000)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48001020, ((_RDWORD(0x48001020) & ~0x0F000000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
        }
        if (TraceD3_Pin == 1) {   /* TRACED3 = PC12 */
          /* configure TRACED3 (PC12) */
          _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000004) );  // RCC_AHB2ENR: IO port C clock enable
          _WDWORD(0x48000800, ((_RDWORD(0x48000800) & ~0x03000000) | 0x02000000) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48000808, ((_RDWORD(0x48000808)              ) | 0x03000000) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800080C, ((_RDWORD(0x4800080C) & ~0x03000000)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48000824, ((_RDWORD(0x48000824) & ~0x000F0000)             ) );  // GPIOx_AFRH:    Alternate Function to AF0
        }

        /* configure TRACED2 */
        if (TraceD2_Pin == 0) {   /* TRACED2 = PE5 */
          /* configure TRACED2 (PE5) */
       // _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000010) );  // RCC_AHB2ENR: IO port E clock enable
          _WDWORD(0x48001000, ((_RDWORD(0x48001000) & ~0x00000C00) | 0x00000800) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48001008, ((_RDWORD(0x48001008)              ) | 0x00000C00) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800100C, ((_RDWORD(0x4800100C) & ~0x00000C00)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48001020, ((_RDWORD(0x48001020) & ~0x00F00000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
        }
        if (TraceD2_Pin == 1) {   /* TRACED2 = PD2 */
          /* configure TRACED2 (PD2) */
          _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000008) );  // RCC_AHB2ENR: IO port D clock enable
          _WDWORD(0x48000C00, ((_RDWORD(0x48000C00) & ~0x00000030) | 0x00000020) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48000C08, ((_RDWORD(0x48000C08)              ) | 0x00000030) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x48000C0C, ((_RDWORD(0x48000C0C) & ~0x00000030)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48000C20, ((_RDWORD(0x48000C20) & ~0x00000F00)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
        }

      case 2:                      /* TRACEDATA[1] */
        /* configure TRACED1 */
        if (TraceD1_Pin == 0) {   /* TRACED1 = PE4 */
          /* configure TRACED1 (PE4) */
       // _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000010) );  // RCC_AHB2ENR: IO port E clock enable
          _WDWORD(0x48001000, ((_RDWORD(0x48001000) & ~0x00000300) | 0x00000200) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48001008, ((_RDWORD(0x48001008)              ) | 0x00000300) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800100C, ((_RDWORD(0x4800100C) & ~0x00000300)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48001020, ((_RDWORD(0x48001020) & ~0x000F0000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
        }
        if (TraceD1_Pin == 1) {   /* TRACED1 = PC10 */
         /* configure TRACED1 (PC10) */
          _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000004) );  // RCC_AHB2ENR: IO port C clock enable
          _WDWORD(0x48000800, ((_RDWORD(0x48000800) & ~0x00300000) | 0x00200000) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48000808, ((_RDWORD(0x48000808)              ) | 0x00300000) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800080C, ((_RDWORD(0x4800080C) & ~0x00300000)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48000824, ((_RDWORD(0x48000824) & ~0x00000F00)             ) );  // GPIOx_AFRH:    Alternate Function to AF0
        }

      case 1:                      /* TRACEDATA[0] */
        /* configure TRACED0 */
        if (TraceD0_Pin == 0) {   /* TRACED0 = PE3 */
          /* configure TRACED0 (PE3) */
       // _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000010) );  // RCC_AHB2ENR: IO port E clock enable
          _WDWORD(0x48001000, ((_RDWORD(0x48001000) & ~0x000000C0) | 0x00000080) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48001008, ((_RDWORD(0x48001008)              ) | 0x000000C0) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800100C, ((_RDWORD(0x4800100C) & ~0x000000C0)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48001020, ((_RDWORD(0x48001020) & ~0x0000F000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
        }
        if (TraceD0_Pin == 1) {   /* TRACED0 = PC1 */
          /* configure TRACED0 (PC1) */
          _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000004) );  // RCC_AHB2ENR: IO port C clock enable
          _WDWORD(0x48000800, ((_RDWORD(0x48000800) & ~0x0000000C) | 0x00000008) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48000808, ((_RDWORD(0x48000808)              ) | 0x0000000C) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800080C, ((_RDWORD(0x4800080C) & ~0x0000000C)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48000820, ((_RDWORD(0x48000820) & ~0x000000F0)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
        }
        if (TraceD0_Pin == 2) {   /* TRACED0 = PC9 */
         /* configure TRACED0 (PC9) */
          _WDWORD(0x4002104C, ( _RDWORD(0x4002104C)                | 0x00000004) );  // RCC_AHB2ENR: IO port C clock enable
          _WDWORD(0x48000800, ((_RDWORD(0x48000800) & ~0x000C0000) | 0x00080000) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x48000808, ((_RDWORD(0x48000808)              ) | 0x000C0000) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4800080C, ((_RDWORD(0x4800080C) & ~0x000C0000)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x48000824, ((_RDWORD(0x48000824) & ~0x000000F0)             ) );  // GPIOx_AFRH:    Alternate Function to AF0
        }
        break;
    }
  }

}

/*----------------------------------------------------------------------------
  Setup_DBGMCU()  configure DBGMCU registers
 *----------------------------------------------------------------------------*/
FUNC void Setup_DBGMCU (void) {

  if (DbgMCU_CR & (1 << 5)){
    Setup_TracePins (((DbgMCU_CR >> 6) & 3));
  }

  _WDWORD(0xE0042004, DbgMCU_CR);                                // Set DBGMCU_CR
  _WDWORD(0xE0042008, DbgMCU_APB1_Fz1);                          // Set DBGMCU_APB1FZR1
  _WDWORD(0xE004200C, DbgMCU_APB1_Fz2);                          // Set DBGMCU_APB1FZR2
  _WDWORD(0xE0042010, DbgMCU_APB2_Fz);                           // Set DBGMCU_APB2FZR
	
  SP = _RDWORD(0x08000000);           // Setup Stack Pointer
  PC = _RDWORD(0x08000004);           // Setup Program Counter
  _WDWORD(0xE000ED08, 0x08000000);    // Setup Vector Table Offset Register
}

/*----------------------------------------------------------------------------
  OnResetExec()  Executed after reset via uVision's 'Reset'-button
 *----------------------------------------------------------------------------*/
FUNC void OnResetExec (void) {
  Setup_DBGMCU();
}

Setup_DBGMCU();                                           // Debugger Setup

